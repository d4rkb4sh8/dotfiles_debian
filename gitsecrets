#!/usr/bin/env bash

# GitSecrets - Advanced Secret Scanner with Progress Tracking

VERSION="2.0.0"
CONFIG_FILE=".gitsecrets"
DEFAULT_PATTERNS=(
    "password.*=.*['\"]?[a-zA-Z0-9]{8,}['\"]?"
    "api_?key=.*['\"]?[a-zA-Z0-9]{16,}['\"]?"
    "token=.*['\"]?[a-zA-Z0-9]{32,}['\"]?"
    "aws_access_key_id=.*"
    "aws_secret_access_key=.*"
    "jwt=.*['\"]?eyJhbGciOi.*['\"]?"
    "ssh-rsa .*"
)

# Color codes
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
MAGENTA='\033[0;35m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

# Initialize variables
VERBOSE=false
REMOVE_SECRETS=false
OUTPUT_FORMAT="standard"
TOTAL_COMMITS=0
CURRENT_COMMIT=0

show_help() {
    echo -e "${GREEN}GitSecrets Pro v${VERSION}${NC}"
    echo "Usage: gitsecrets [OPTIONS]"
    echo
    echo "Options:"
    echo "  -h, --help          Show this help message"
    echo "  -v, --verbose       Enable verbose output"
    echo "  -r, --remove        Remove detected secrets from history"
    echo "  -c, --config FILE   Use custom config file (default: .gitsecrets)"
    echo "  -o, --output FORMAT Output format (standard, json)"
    echo "  --version           Show version information"
    echo
    echo "Features:"
    echo "  - Real-time progress tracking"
    echo "  - Advanced path handling"
    echo "  - Built-in secret removal"
    echo "  - Colorized output"
    exit 0
}

progress_bar() {
    local width=50
    local percent=$1
    local filled=$((width * percent / 100))
    local empty=$((width - filled))
    printf -v bar "%${filled}s" "" | tr ' ' '='
    printf -v arrow ">%${empty}s" ""
    printf "${MAGENTA}[%-${width}s] ${CYAN}%3d%%${NC}" "${bar}${arrow}" "$percent"
}

update_progress() {
    ((CURRENT_COMMIT++))
    if ! $VERBOSE; then
        percent=$((CURRENT_COMMIT * 100 / TOTAL_COMMITS))
        echo -ne "\r$(progress_bar $percent) Scanning commit ${CURRENT_COMMIT}/${TOTAL_COMMITS}"
    fi
}

load_patterns() {
    if [[ -f "$CONFIG_FILE" ]]; then
        mapfile -t PATTERNS < "$CONFIG_FILE"
    else
        PATTERNS=("${DEFAULT_PATTERNS[@]}")
    fi
}

check_dependencies() {
    if ! git rev-parse --is-inside-work-tree > /dev/null 2>&1; then
        echo -e "${RED}Error: Not in a Git repository${NC}"
        exit 1
    fi

    if ! command -v awk >/dev/null || ! command -v grep >/dev/null; then
        echo -e "${RED}Error: Missing required dependencies (awk, grep)${NC}"
        exit 1
    fi
    
    if $REMOVE_SECRETS && ! command -v git-filter-repo >/dev/null; then
        echo -e "${RED}Error: git-filter-repo required for removal${NC}"
        echo "Install with: pip3 install git-filter-repo"
        exit 1
    fi
}

scan_commit() {
    local commit=$1 pattern=$2
    git diff-tree --no-commit-id --name-only -r "$commit" | while IFS= read -r file; do
        if ! git ls-tree --name-only -r "$commit" | grep -Fxq "$file"; then
            $VERBOSE && echo -e "${YELLOW}Skipping deleted file: ${file}${NC}" >&2
            continue
        fi
        
        if git check-attr -z binary -- "$file" | awk -F ' ' '{print $3}' | xargs -0 -I {} [ {} = "set" ]; then
            $VERBOSE && echo -e "${YELLOW}Skipping binary file: ${file}${NC}"
            continue
        fi

        git -c core.quotepath=off show "$commit:$file" 2>/dev/null | {
            grep --color=always -nE "$pattern" || true
        } | while IFS= read -r match; do
            echo -e "${RED}Secret detected: ${BLUE}${file}${NC} (commit: ${commit})"
            echo "$commit:$file:$pattern" >> .gitsecrets_findings
            $VERBOSE && echo -e "${YELLOW}Match found: ${match}${NC}"
        done
    done
}

scan_history() {
    echo -e "${YELLOW}Scanning all commits...${NC}"
    TOTAL_COMMITS=$(git rev-list --all --count)
    [ $TOTAL_COMMITS -eq 0 ] && return
    
    git rev-list --all | while IFS= read -r commit; do
        update_progress
        for pattern in "${PATTERNS[@]}"; do
            scan_commit "$commit" "$pattern"
        done
    done
    ! $VERBOSE && echo
}

scan_dangling() {
    echo -e "${YELLOW}Scanning dangling objects...${NC}"
    local total_objects=$(git fsck --unreachable --no-reflogs | wc -l)
    local current_object=0
    
    git fsck --unreachable --no-reflogs | awk '{print $3}' | while IFS= read -r object; do
        ((current_object++))
        if ! $VERBOSE; then
            percent=$((current_object * 100 / total_objects))
            echo -ne "\r$(progress_bar $percent) Scanning objects ${current_object}/${total_objects}"
        fi
        
        obj_type=$(git cat-file -t "$object" 2>/dev/null)
        if [ "$obj_type" = "blob" ]; then
            $VERBOSE && echo -e "${BLUE}Checking blob: ${object}${NC}"
            git show "$object" | {
                grep --color=always -nE "$pattern" || true
            } | while IFS= read -r match; do
                echo -e "${RED}Secret detected in dangling blob: ${object}${NC}"
                echo "dangling:$object:$pattern" >> .gitsecrets_findings
            done
        fi
    done
    ! $VERBOSE && echo
}

remove_secrets() {
    [ ! -f .gitsecrets_findings ] && return

    echo -e "${YELLOW}Rewriting history to remove secrets...${NC}"
    local total_commits=$(wc -l < .gitsecrets_findings | tr -d ' ')
    local current=0
    
    awk -F: '{print $1}' .gitsecrets_findings | sort -u | while IFS= read -r commit; do
        ((current++))
        percent=$((current * 100 / total_commits))
        echo -ne "\r$(progress_bar $percent) Processing ${current}/${total_commits} commits"
        
        git filter-repo --force --commit-callback "
            if commit.id == b'$commit':
                commit.message = b'REMOVED: Sensitive content'
                for file in commit.file_changes:
                    if file.type in (b'add', b'modify'):
                        file.data = file.data.replace(b'$pattern', b'[REDACTED]')" &> /dev/null
    done
    
    echo -e "\n${GREEN}History rewritten successfully!${NC}"
    echo -e "${YELLOW}Run 'git push --force' to update remote repository${NC}"
}

parse_arguments() {
    while [[ $# -gt 0 ]]; do
        case $1 in
            -h|--help) show_help ;;
            -v|--verbose) VERBOSE=true ;;
            -r|--remove) REMOVE_SECRETS=true ;;
            -c|--config)
                CONFIG_FILE="$2"
                shift ;;
            -o|--output)
                OUTPUT_FORMAT="$2"
                shift ;;
            --version)
                echo -e "${GREEN}GitSecrets Pro v${VERSION}${NC}"
                exit 0 ;;
            *)
                echo -e "${RED}Unknown option: $1${NC}"
                exit 1 ;;
        esac
        shift
    done
}

main() {
    parse_arguments "$@"
    check_dependencies
    load_patterns

    echo -e "${GREEN}Starting GitSecrets Pro Scan${NC}"
    echo -e "Using ${BLUE}${#PATTERNS[@]}${NC} detection patterns"

    rm -f .gitsecrets_findings
    scan_history
    scan_dangling

    if [ -f .gitsecrets_findings ]; then
        echo -e "\n${RED}=== SECRETS DETECTED ===${NC}"
        cat .gitsecrets_findings
        if $REMOVE_SECRETS; then
            remove_secrets
        else
            echo -e "${YELLOW}To remove secrets, run with --remove option${NC}"
        fi
    else
        echo -e "\n${GREEN}=== NO SECRETS FOUND ===${NC}"
    fi
}

main "$@"
